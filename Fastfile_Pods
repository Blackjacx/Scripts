# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

#
# This file was created by the help of https://gist.github.com/ulhas/e8e529d08849b8cda947
#

# NOTE: To use faslane install:
#           gem install bundler 
#           brew install git-flow
#           brew install apledoc
#
#     Git-flow witll be configured upon installation or the first run of fastlane.
#     IMPORTANT: Use the default options !!!
#
#   and then run:
#           bundle exec fastlane release_to_cocoapods framework:SHSearchBar version:"<YOUR_VERSION_HERE>"

# POSSIBLE ADDONS
# => update_info_plist

# LINKS
# => http://danielkummer.github.io/git-flow-cheatsheet/
# => https://docs.fastlane.tools/actions/
# => https://gist.github.com/JamesMGreene/cdd0ac49f90c987e45ac

# This is the minimum version number required. 
# Update this, if you use features of a newer version.
fastlane_version "2.81.0"

default_platform :ios

before_all do
end


after_all do |lane|
  # This block is called, only if the executed lane was successful
  notification(message: "#{lane} finished")
end


error do |lane, exception|
  # This block is called, only if the executed lane failed
  notification(message: "#{lane} finished with error #{exception}")
end


###############################################################################
#                          PUBLIC SECTION
###############################################################################

desc "Creates a release branch"
desc "Runs framework tests"
desc "Increments framework number"
desc "Updates podspec file"
desc "Pushes podspec file to Cocoapods"
desc "Pushes releases to github"
desc "Commits and pushes changes to remote and tags the release commit"
lane :release do |options|

  framework = options[:framework]
  UI.crash!("No framework specified") if framework.nil? || framework.empty?

  version = options[:version]
  UI.crash!("No version specified") if version.nil? || version.empty?

  # Ensure the source code is OK and tests are green
  ensure_git_status_clean
  ensure_git_branch(branch: "develop")
  git_pull
  pod_lib_lint(allow_warnings: false)
  test(framework: framework, version: version)

  sh "git flow release start #{version}"
  
  increment_framework_version(framework: framework, version: version)
  update_framework_podspec(framework: framework, version: version)
  push_github_release(framework: framework, version: version)

  sh "git commit -am 'Fastlane: Release on Production #{version}'"

  # Finish the release branch. The shell may hang here because it: 
  # 1) promts for a merge message.
  # 
  # To get around this do the following:
  # 1) git config --global core.mergeoptions --no-edit
  sh "git flow release finish -m 'finished_release_on_production_#{version}' #{version}"   

  # push to develop + push tags
  push_to_git_remote(local_branch: "develop", force: true)

  # push to master + push tags
  push_to_git_remote(local_branch: "master", force: true)

  # Needs to be done at the end (expects git tag to be available)
  push_framework_podspec(framework: framework)
end


desc "Runs tests using scan"
lane :test do |options|

  framework = options[:framework]
  UI.crash!("No framework specified") if framework.nil? || framework.empty?

  workspace = "Example/#{framework}.xcworkspace"

  cocoapods(
    podfile: "Example/Podfile",
    repo_update: true
  )

  scan(
    workspace: workspace,
    scheme: "#{framework}-Example",
    clean: true,
    devices: ["iPhone SE", "iPhone 8", "iPhone 8 Plus", "iPhone X"]
  )
end


###############################################################################
#                          PRIVATE SECTION
###############################################################################

desc "Increments CFBundleVersion by one and sets CFBundleShortVersionString"
private_lane :increment_framework_version do |options|

  framework = options[:framework]
  UI.crash!("No framework specified") if framework.nil? || framework.empty?

  version = options[:version]
  UI.crash!("No version specified") if version.nil? || version.empty?

  project = "Example/#{framework}.xcodeproj"

  increment_version_number(xcodeproj: project, version_number: version)
  increment_build_number(xcodeproj: project)
end



desc "Updates framework podspec version"
private_lane :update_framework_podspec do |options|

  framework = options[:framework]
  UI.crash!("No framework specified") if framework.nil? || framework.empty?

  version = options[:version]
  UI.crash!("No version specified") if version.nil? || version.empty?

  podspec = "#{framework}.podspec"

  version_bump_podspec(path: podspec, version_number: version)
end



desc "Pushes framework podspec to Cocoapods specs"
private_lane :push_framework_podspec do |options|

  framework = options[:framework]
  UI.crash!("No framework specified") if framework.nil? || framework.empty?
  
  podspec = "#{framework}.podspec"

  pod_push(path: podspec)
end



desc "Creates a github release with a git commit changelog"
private_lane :push_github_release do |options|

  framework = options[:framework]
  UI.crash!("No framework specified") if framework.nil? || framework.empty?

  version = options[:version]
  UI.crash!("No version specified") if version.nil? || version.empty?

  changelog = read_changelog(
    section_identifier: '[Unreleased]',	# Specify what section to read
    excluded_markdown_elements: []	# Specify which markdown elements should be excluded
  )

  stamp_changelog(
    section_identifier: version # Stamp Unreleased section with newly released build number
  )

  github_release = set_github_release(
    repository_name: "blackjacx/#{framework}",
    api_token: ENV["GITHUB_TOKEN"],
    name: version,
    tag_name: version,
    description: (changelog || "No changelog provided"),
    commitish: "master",
    # upload_assets: ["example_integration.ipa", "./pkg/built.gem"],
  )
end
