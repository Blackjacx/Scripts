# Plugins can read the versions files used by other version managers (if enabled by the plugin)
# For example, .nvmrc in the case of node's nvm
legacy_version_file = false                     # enabled by default (unlike asdf)
legacy_version_file_disable_tools = []          # disable for specific tools

color = true
all_compile = false                     # Do not use precompiled binaries for all languages.
always_keep_download = false            # deleted after install by default
always_keep_install = false             # deleted on failure by default
disable_default_shorthands = false      # disable the default shorthands, see `MISE_DISABLE_DEFAULT_SHORTHANDS`
disable_tools = ['ruby','node']         # disable specific tools, generally used to turn off core tools
not_found_auto_install = true           # Set to false to disable the "command not found" handler to autoinstall missing tool versions.
paranoid = false                        # Paranoid is an optional behavior that locks mise down more to make it harder for a bad actor to compromise your system.

# configure how frequently (in minutes) to fetch updated plugin repository changes
# this is updated whenever a new runtime is installed
# (note: this isn't currently implemented but there are plans to add it: https://github.com/jdx/mise/issues/128)
plugin_autoupdate_last_check_duration = "7d"    # set to 0 to disable updates

quiet = false
# shorthands_file = null                # path to the shorthands file, see `MISE_SHORTHANDS_FILE`
# task_output = null                    # see Task Runner for more information
trusted_config_paths = []               # config files with these prefixes will be trusted by default

verbose = false             # set to true to see full installation output, see `MISE_VERBOSE`
asdf_compat = false
yes = true                  # set to true to automatically answer yes to all prompts
jobs = 5                    # number of plugins or runtimes to install in parallel. The default is `4`.
raw = false                 # set to true to directly pipe plugins to stdin/stdout/stderr

experimental = true         # enable experimental features

# env_file = '.env' # load env vars from a dotenv file, see `MISE_ENV_FILE`

